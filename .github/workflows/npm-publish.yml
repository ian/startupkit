name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages_filter:
        description: 'Filter packages to publish (comma-separated, leave empty for all)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Increment version
        run: |
          # Get the version type from input, default to patch
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          # Increment version for all packages
          pnpm -r exec -- npm version $VERSION_TYPE --no-git-tag-version
          
          # Get the new version from the first package found
          NEW_VERSION=$(find packages -name "package.json" -exec node -p "require('{}').version" \; | head -1)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit version changes
          git add .
          git commit -m "chore: bump version to $NEW_VERSION"

      - name: Verify package versions
        if: env.NEW_VERSION
        run: |
          echo "🔍 Verifying package versions were updated correctly..."
          find packages -name "package.json" -exec node -e "
            const pkg = require('{}');
            const expectedVersion = '$NEW_VERSION';
            if (pkg.version === expectedVersion) {
              console.log('✅ ' + pkg.name + ' version is correct: ' + pkg.version);
            } else {
              console.log('❌ ' + pkg.name + ' version mismatch: expected ' + expectedVersion + ', got ' + pkg.version);
            }
          " \;

      - name: Build packages
        run: pnpm run build

      - name: List packages to be published
        run: |
          echo "📦 Packages that will be published:"
          echo "🔍 Trigger: ${{ github.event_name }}"
          if [ -n "$NEW_VERSION" ]; then
            echo "📌 Target version: $NEW_VERSION"
          fi
          
          if [ -n "${{ github.event.inputs.packages_filter }}" ]; then
            echo "🔍 Filtering packages: ${{ github.event.inputs.packages_filter }}"
            IFS=',' read -ra FILTERS <<< "${{ github.event.inputs.packages_filter }}"
            for filter in "${FILTERS[@]}"; do
              find packages -name "package.json" -path "*${filter}*" -exec node -e "
                const pkg = require('{}');
                if (!pkg.private) {
                  console.log('✅ ' + pkg.name + '@' + pkg.version);
                }
              " \;
            done
          else
            echo "📋 All non-private packages:"
            find packages -name "package.json" -exec node -e "
              const pkg = require('{}');
              if (!pkg.private) {
                console.log('✅ ' + pkg.name + '@' + pkg.version);
              }
            " \;
          fi

      - name: Generate OTP code
        run: |
          echo "🔐 Generating OTP code for 2FA..."
          OTP_CODE=$(node -e "
            const crypto = require('crypto');
            
            // Base32 decoder
            function base32Decode(encoded) {
              const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
              let bits = '';
              let result = [];
              
              for (let i = 0; i < encoded.length; i++) {
                const val = alphabet.indexOf(encoded.charAt(i).toUpperCase());
                if (val >= 0) {
                  bits += val.toString(2).padStart(5, '0');
                }
              }
              
              for (let i = 0; i + 8 <= bits.length; i += 8) {
                result.push(parseInt(bits.substr(i, 8), 2));
              }
              
              return Buffer.from(result);
            }
            
            const secret = '${{ secrets.NPM_OTP_SECRET }}';
            const time = Math.floor(Date.now() / 1000 / 30);
            const buffer = Buffer.alloc(8);
            buffer.writeUInt32BE(time, 4);
            
            const secretBuffer = base32Decode(secret);
            const hmac = crypto.createHmac('sha1', secretBuffer);
            hmac.update(buffer);
            const hash = hmac.digest();
            
            const offset = hash[hash.length - 1] & 0xf;
            const code = ((hash[offset] & 0x7f) << 24) | 
                        ((hash[offset + 1] & 0xff) << 16) | 
                        ((hash[offset + 2] & 0xff) << 8) | 
                        (hash[offset + 3] & 0xff);
            
            console.log(String(code % 1000000).padStart(6, '0'));
          ")
          echo "OTP_CODE=$OTP_CODE" >> $GITHUB_ENV
          echo "✅ OTP code generated: $OTP_CODE"

      - name: Publish to NPM
        run: |
          # Always use OTP for 2FA
          OTP_FLAG="--otp $OTP_CODE"
          echo "🔐 Using 2FA authentication with OTP: $OTP_CODE"
          
          if [ -n "${{ github.event.inputs.packages_filter }}" ]; then
            echo "🎯 Publishing filtered packages..."
            IFS=',' read -ra FILTERS <<< "${{ github.event.inputs.packages_filter }}"
            for filter in "${FILTERS[@]}"; do
              echo "Publishing packages matching: ${filter}"
              pnpm --filter "*${filter}*" publish --access public --no-git-checks $OTP_FLAG
            done
          else
            echo "🚀 Publishing all packages..."
            if [ -n "$OTP_FLAG" ]; then
              # For 2FA, we need to publish each package individually with OTP
              echo "Publishing packages individually with 2FA..."
              find packages -name "package.json" -exec dirname {} \; | while read package_dir; do
                package_name=$(node -p "require('./$package_dir/package.json').name")
                if [ "$(node -p "require('./$package_dir/package.json').private || false")" != "true" ]; then
                  echo "📦 Publishing $package_name..."
                  cd "$package_dir"
                  npm publish --access public $OTP_FLAG
                  cd - > /dev/null
                fi
              done
            else
              pnpm run release
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 