name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages_filter:
        description: 'Filter packages to publish (comma-separated, leave empty for all)'
        required: false
        type: string
  push:
    tags:
      - '*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Increment version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get the version type from input, default to patch
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          # Increment version for all packages
          pnpm -r exec -- npm version $VERSION_TYPE --no-git-tag-version
          
          # Get the new version from the first package found
          NEW_VERSION=$(find packages -name "package.json" -exec node -p "require('{}').version" \; | head -1)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit version changes
          git add .
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      - name: Extract version from tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          # Extract version from tag (remove 'refs/tags/' prefix and any 'v' prefix)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=${TAG_NAME#v}
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Extracted version: $NEW_VERSION from tag: $TAG_NAME"

      - name: Update package versions from tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && env.NEW_VERSION
        run: |
          echo "Updating all package versions to $NEW_VERSION"
          
          # Update all package.json files to the new version
          find packages -name "package.json" -exec node -e "
            const fs = require('fs');
            const path = process.argv[1];
            const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated ' + pkg.name + ' to version $NEW_VERSION');
          " {} \;
          
          # Also update root package.json if it exists and has a version
          if [ -f "package.json" ]; then
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              if (pkg.version && pkg.version !== '0.0.0') {
                pkg.version = '$NEW_VERSION';
                fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
                console.log('Updated root package.json to version $NEW_VERSION');
              }
            "
          fi

      - name: Verify package versions
        if: env.NEW_VERSION
        run: |
          echo "üîç Verifying package versions were updated correctly..."
          find packages -name "package.json" -exec node -e "
            const pkg = require('{}');
            const expectedVersion = '$NEW_VERSION';
            if (pkg.version === expectedVersion) {
              console.log('‚úÖ ' + pkg.name + ' version is correct: ' + pkg.version);
            } else {
              console.log('‚ùå ' + pkg.name + ' version mismatch: expected ' + expectedVersion + ', got ' + pkg.version);
            }
          " \;

      - name: Build packages
        run: pnpm run build

      - name: List packages to be published
        run: |
          echo "üì¶ Packages that will be published:"
          echo "üîç Trigger: ${{ github.event_name }}"
          echo "üè∑Ô∏è  Ref: ${{ github.ref }}"
          if [ -n "$NEW_VERSION" ]; then
            echo "üìå Target version: $NEW_VERSION"
          fi
          
          if [ -n "${{ github.event.inputs.packages_filter }}" ]; then
            echo "üîç Filtering packages: ${{ github.event.inputs.packages_filter }}"
            IFS=',' read -ra FILTERS <<< "${{ github.event.inputs.packages_filter }}"
            for filter in "${FILTERS[@]}"; do
              find packages -name "package.json" -path "*${filter}*" -exec node -e "
                const pkg = require('{}');
                if (!pkg.private) {
                  console.log('‚úÖ ' + pkg.name + '@' + pkg.version);
                }
              " \;
            done
          else
            echo "üìã All non-private packages:"
            find packages -name "package.json" -exec node -e "
              const pkg = require('{}');
              if (!pkg.private) {
                console.log('‚úÖ ' + pkg.name + '@' + pkg.version);
              }
            " \;
          fi

      - name: Generate OTP code
        if: vars.NPM_OTP_SECRET != ''
        run: |
          echo "üîê Generating OTP code for 2FA..."
          OTP_CODE=$(node -e "
            const crypto = require('crypto');
            
            // Base32 decoder
            function base32Decode(encoded) {
              const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
              let bits = '';
              let result = [];
              
              for (let i = 0; i < encoded.length; i++) {
                const val = alphabet.indexOf(encoded.charAt(i).toUpperCase());
                if (val >= 0) {
                  bits += val.toString(2).padStart(5, '0');
                }
              }
              
              for (let i = 0; i + 8 <= bits.length; i += 8) {
                result.push(parseInt(bits.substr(i, 8), 2));
              }
              
              return Buffer.from(result);
            }
            
            const secret = '${{ vars.NPM_OTP_SECRET }}';
            const time = Math.floor(Date.now() / 1000 / 30);
            const buffer = Buffer.alloc(8);
            buffer.writeUInt32BE(time, 4);
            
            const secretBuffer = base32Decode(secret);
            const hmac = crypto.createHmac('sha1', secretBuffer);
            hmac.update(buffer);
            const hash = hmac.digest();
            
            const offset = hash[hash.length - 1] & 0xf;
            const code = ((hash[offset] & 0x7f) << 24) | 
                        ((hash[offset + 1] & 0xff) << 16) | 
                        ((hash[offset + 2] & 0xff) << 8) | 
                        (hash[offset + 3] & 0xff);
            
            console.log(String(code % 1000000).padStart(6, '0'));
          ")
          echo "OTP_CODE=$OTP_CODE" >> $GITHUB_ENV
          echo "‚úÖ OTP code generated"

      - name: Publish to NPM
        run: |
          # Prepare OTP flag if available
          OTP_FLAG=""
          if [ -n "${{ vars.NPM_OTP_SECRET }}" ] && [ -n "$OTP_CODE" ]; then
            OTP_FLAG="--otp $OTP_CODE"
            echo "üîê Using 2FA authentication"
          fi
          
          if [ -n "${{ github.event.inputs.packages_filter }}" ]; then
            echo "üéØ Publishing filtered packages..."
            IFS=',' read -ra FILTERS <<< "${{ github.event.inputs.packages_filter }}"
            for filter in "${FILTERS[@]}"; do
              echo "Publishing packages matching: ${filter}"
              pnpm --filter "*${filter}*" publish --access public --no-git-checks $OTP_FLAG
            done
          else
            echo "üöÄ Publishing all packages..."
            if [ -n "$OTP_FLAG" ]; then
              # For 2FA, we need to publish each package individually with OTP
              echo "Publishing packages individually with 2FA..."
              find packages -name "package.json" -exec dirname {} \; | while read package_dir; do
                package_name=$(node -p "require('./$package_dir/package.json').name")
                if [ "$(node -p "require('./$package_dir/package.json').private || false")" != "true" ]; then
                  echo "üì¶ Publishing $package_name..."
                  cd "$package_dir"
                  npm publish --access public $OTP_FLAG
                  cd - > /dev/null
                fi
              done
            else
              pnpm run release
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate package list
        if: env.NEW_VERSION
        run: |
          echo "PACKAGE_LIST<<EOF" >> $GITHUB_ENV
          if [ -n "${{ github.event.inputs.packages_filter }}" ]; then
            IFS=',' read -ra FILTERS <<< "${{ github.event.inputs.packages_filter }}"
            for filter in "${FILTERS[@]}"; do
              find packages -name "package.json" -path "*${filter}*" -exec node -e "
                const pkg = require('{}');
                if (!pkg.private) {
                  console.log('- ' + pkg.name + '@' + pkg.version);
                }
              " \;
            done
          else
            find packages -name "package.json" -exec node -e "
              const pkg = require('{}');
              if (!pkg.private) {
                console.log('- ' + pkg.name + '@' + pkg.version);
              }
            " \;
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: env.NEW_VERSION
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## Changes in v${{ env.NEW_VERSION }}
            
            This release includes updates to packages in the workspace.
            
            ### Packages Published:
            ${{ env.PACKAGE_LIST }}
            
            ### Trigger Information:
            - **Version Type**: ${{ github.event.inputs.version_type || 'tag-based' }}
            - **Packages Filter**: ${{ github.event.inputs.packages_filter || 'all packages' }}
            - **Workflow**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Tag Push' }}
          draft: false
          prerelease: false 